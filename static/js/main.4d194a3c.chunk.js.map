{"version":3,"sources":["Components/Produce/ProduceList.js","Pre-Populated-Data/AvailableProduce.js","Components/Produce/ProduceControl.js","Components/Navigation/NavBar.js","Components/Location/LocationDetails.js","Pre-Populated-Data/MarketSchedule.js","Components/Location/LocationControl.js","Components/App.js","serviceWorker.js","index.js"],"names":["ProduceList","props","Fragment","currentMonth","produceList","map","produceItem","availableProduce","month","selection","ProduceControl","handleSubmit","event","preventDefault","setState","monthSelected","target","value","monthlyProduce","state","className","this","onChange","React","Component","NavBar","LocationDetails","day","location","hours","booth","marketSchedule","LocationControl","dateSelected","currentMarketLocation","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAmBeA,MAhBf,SAAqBC,GACnB,OACE,kBAAC,IAAMC,SAAP,KACE,4BAAKD,EAAME,cAEPF,EAAMG,YAAYC,KAAI,SAACC,GAAD,OAAiB,4BAAKA,QCRzCC,EAAmB,CAC9B,CACGC,MAAO,UACPC,UAAW,CACR,SACA,YACA,QACA,SACA,YACA,SACA,WACA,YAGN,CACGD,MAAO,WACPC,UAAW,CACR,SACA,YACA,QACA,SACA,YACA,SACA,aAGN,CACGD,MAAO,QACPC,UAAW,CACR,SACA,YACA,QACA,UACA,SACA,YACA,SACA,aAGN,CACGD,MAAO,QACPC,UAAW,CACR,SACA,YACA,QACA,UACA,YACA,SACA,UACA,YACA,SACA,aAGN,CACGD,MAAO,MACPC,UAAW,CACR,SACA,YACA,QACA,UACA,YACA,cACA,SACA,UACA,WACA,aAGN,CACGD,MAAO,OACPC,UAAW,CACR,SACA,YACA,QACA,UACA,eACA,WACA,cACA,eACA,YACA,WACA,cACA,WACA,UACA,YACA,WACA,WACA,WAGN,CACGD,MAAO,OACPC,UAAW,CACR,SACA,YACA,QACA,UACA,WACA,eACA,cACA,WACA,SACA,aACA,UACA,cACA,eACA,WACA,QACA,WACA,kBACA,UACA,UACA,cACA,WACA,WACA,SACA,cACA,WACA,UACA,YACA,WACA,WACA,SACA,YAGN,CACGD,MAAO,SACPC,UAAW,CACR,SACA,WACA,eACA,cACA,WACA,SACA,aACA,UACA,QACA,QACA,cACA,UACA,eACA,WACA,QACA,WACA,kBACA,UACA,UACA,cACA,OACA,WACA,WACA,SACA,cACA,WACA,UACA,YACA,SACA,OACA,UACA,WACA,WACA,SACA,YAGN,CACGD,MAAO,YACPC,UAAW,CACR,SACA,cACA,SACA,SACA,UACA,QACA,QACA,cACA,WACA,WACA,kBACA,UACA,UACA,cACA,OACA,WACA,WACA,SACA,cACA,WACA,UACA,YACA,SACA,OACA,UACA,WACA,WACA,SACA,YAGN,CACGD,MAAO,UACPC,UAAW,CACR,SACA,SACA,YACA,SACA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","file":"static/js/main.4d194a3c.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction ProduceList(props){\n  return(\n    <React.Fragment>\n      <h1>{props.currentMonth}</h1>\n        {\n          props.produceList.map((produceItem) => <li>{produceItem}</li>)\n        }\n    </React.Fragment>\n  );\n}\n\nProduceList.propTypes = {\n  currentMonth: PropTypes.string,\n  produceList: PropTypes.arrayOf(PropTypes.string)\n}\n\nexport default ProduceList;","export const availableProduce = [  \n  {  \n     month: \"January\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Garlic\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Potatoes\",\n        \"Turnips\"\n     ]\n  },\n  {  \n     month: \"February\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Garlic\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Potatoes\"\n     ]\n  },\n  {  \n     month: \"March\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Rhubarb\",\n        \"Garlic\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Potatoes\"\n     ]\n  },\n  {  \n     month: \"April\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Rhubarb\",\n        \"Asparagus\",\n        \"Garlic\",\n        \"Lettuce\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Potatoes\"\n     ]\n  },\n  {  \n     month: \"May\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Rhubarb\",\n        \"Asparagus\",\n        \"Cauliflower\",\n        \"Garlic\",\n        \"Lettuce\",\n        \"Potatoes\",\n        \"Radishes\"\n     ]\n  },\n  {  \n     month: \"June\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Rhubarb\",\n        \"Blackberries\",\n        \"Cherries\",\n        \"Raspberries\",\n        \"Strawberries\",\n        \"Asparagus\",\n        \"Broccoli\",\n        \"Cauliflower\",\n        \"Kohlrabi\",\n        \"Lettuce\",\n        \"Mushrooms\",\n        \"Potatoes\",\n        \"Radishes\",\n        \"Squash\"\n     ]\n  },\n  {  \n     month: \"July\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Rhubarb\",\n        \"Apricots\",\n        \"Blackberries\",\n        \"Blueberries\",\n        \"Cherries\",\n        \"Melons\",\n        \"Nectarines\",\n        \"Peaches\",\n        \"Raspberries\",\n        \"Strawberries\",\n        \"Tomatoes\",\n        \"Beets\",\n        \"Broccoli\",\n        \"Brussel Sprouts\",\n        \"Cabbage\",\n        \"Carrots\",\n        \"Cauliflower\",\n        \"Cucumber\",\n        \"Eggplant\",\n        \"Garlic\",\n        \"Green Beans\",\n        \"Kohlrabi\",\n        \"Lettuce\",\n        \"Mushrooms\",\n        \"Potatoes\",\n        \"Radishes\",\n        \"Squash\",\n        \"Turnips\"\n     ]\n  },\n  {  \n     month: \"August\",\n     selection: [  \n        \"Apples\",\n        \"Apricots\",\n        \"Blackberries\",\n        \"Blueberries\",\n        \"Cherries\",\n        \"Melons\",\n        \"Nectarines\",\n        \"Peaches\",\n        \"Pears\",\n        \"Plums\",\n        \"Raspberries\",\n        \"Rhubarb\",\n        \"Strawberries\",\n        \"Tomatoes\",\n        \"Beets\",\n        \"Broccoli\",\n        \"Brussel Sprouts\",\n        \"Cabbage\",\n        \"Carrots\",\n        \"Cauliflower\",\n        \"Corn\",\n        \"Cucumber\",\n        \"Eggplant\",\n        \"Garlic\",\n        \"Green Beans\",\n        \"Kohlrabi\",\n        \"Lettuce\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Peas\",\n        \"Peppers\",\n        \"Potatoes\",\n        \"Radishes\",\n        \"Squash\",\n        \"Turnips\"\n     ]\n  },\n  {  \n     month: \"September\",\n     selection: [  \n        \"Apples\",\n        \"Blueberries\",\n        \"Grapes\",\n        \"Melons\",\n        \"Peaches\",\n        \"Pears\",\n        \"Plums\",\n        \"Raspberries\",\n        \"Tomatoes\",\n        \"Broccoli\",\n        \"Brussel Sprouts\",\n        \"Cabbage\",\n        \"Carrots\",\n        \"Cauliflower\",\n        \"Corn\",\n        \"Cucumber\",\n        \"Eggplant\",\n        \"Garlic\",\n        \"Green Beans\",\n        \"Kohlrabi\",\n        \"Lettuce\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Peas\",\n        \"Peppers\",\n        \"Potatoes\",\n        \"Radishes\",\n        \"Squash\",\n        \"Turnips\"\n     ]\n  },\n  {  \n     month: \"October\",\n     selection: [  \n        \"Apples\",\n        \"Grapes\",\n        \"Hazelnuts\",\n        \"Melons\",\n        \"Peaches\",\n        \"Pears\",\n        \"Tomatoes\",\n        \"Broccoli\",\n        \"Brussel Sprouts\",\n        \"Cabbage\",\n        \"Carrots\",\n        \"Cauliflower\",\n        \"Corn\",\n        \"Cucumber\",\n        \"Eggplant\",\n        \"Garlic\",\n        \"Green Beans\",\n        \"Kohlrabi\",\n        \"Lettuce\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Peas\",\n        \"Peppers\",\n        \"Potatoes\",\n        \"Pumpkins\",\n        \"Radishes\",\n        \"Squash\",\n        \"Turnips\"\n     ]\n  },\n  {  \n     month: \"November\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n        \"Broccoli\",\n        \"Carrots\",\n        \"Cauliflower\",\n        \"Garlic\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Potatoes\",\n        \"Squash\",\n        \"Turnips\"\n     ]\n  },\n  {  \n     month: \"December\",\n     selection: [  \n        \"Apples\",\n        \"Hazelnuts\",\n        \"Pears\",\n       \"Broccoli\",\n        \"Carrots\",\n        \"Cauliflower\",\n        \"Garlic\",\n        \"Mushrooms\",\n        \"Onions\",\n        \"Potatoes\",\n        \"Turnips\"\n     ]\n  }\n];","import React from \"react\";\nimport ProduceList from \"./ProduceList\";\nimport { availableProduce } from \"../../Pre-Populated-Data/AvailableProduce\";\n\nclass ProduceControl extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      monthSelected: 0,\n      month: availableProduce[0].month,\n      monthlyProduce: availableProduce[0].selection\n    }\n  }  \n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.setState({monthSelected: event.target.value, month: availableProduce[event.target.value].month, monthlyProduce: availableProduce[event.target.value].selection});\n  }\n\n  render(){\n\n    return(\n      <React.Fragment>\n        <div className=\"produce-box\">\n          <form>\n            <select value={this.state.monthSelected} onChange={this.handleSubmit}>\n              <option value=\"0\">January</option>\n              <option value=\"1\">Febuary</option>\n              <option value=\"2\">March</option>\n              <option value=\"3\">April</option>\n              <option value=\"4\">May</option>\n              <option value=\"5\">June</option>\n              <option value=\"6\">July</option>\n              <option value=\"7\">August</option>\n              <option value=\"8\">September</option>\n              <option value=\"9\">October</option>\n              <option value=\"10\">November</option>\n              <option value=\"11\">December</option>\n            </select>\n          </form>\n          <ProduceList currentMonth={this.state.month}\n          produceList={this.state.monthlyProduce} />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProduceControl;","import React from \"react\";\n\nfunction NavBar(){\n  return(\n    <React.Fragment>\n      <h1>Avery's Organics</h1>\n    </React.Fragment>\n  );\n}\n\nexport default NavBar;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction LocationDetails(props){\n  return (\n    <React.Fragment>\n      <h1>{props.day}'s Market Location</h1>\n      <p>Address: {props.location}</p>\n      <p>Hours: {props.hours}</p>\n      <p>Booth: {props.booth}</p>\n    </React.Fragment>\n  );\n}\n\nLocationDetails.propTypes = {\n  day: PropTypes.string,\n  location: PropTypes.string,\n  hours: PropTypes.string,\n  booth: PropTypes.string\n}\n\nexport default LocationDetails;","export const marketSchedule = [  \n  {  \n     day: \"Sunday\",\n     location: \"Lents International\",\n     hours: \"9:00am - 2:00pm\",\n     booth: \"4A\"\n  },\n  {  \n     day: \"Monday\",\n     location: \"Pioneer Courthouse Square\",\n     hours: \"10:00am - 2:00pm\",\n     booth: \"7C\"\n  },\n  {  \n     day: \"Tuesday\",\n     location: \"Hillsboro\",\n     hours: \"5:00pm - 8:30pm\",\n     booth: \"1F\"\n  },\n  {  \n     day: \"Wednesday\",\n     location: \"Shemanski Park\",\n     hours: \"10:00am - 2:00pm\",\n     booth: \"3E\"\n  },\n  {  \n     day: \"Thursday\",\n     location: \"Northwest Portland\",\n     hours: \"2:00pm - 6:00pm\",\n     booth: \"6D\"\n  },\n  {  \n     day: \"Saturday\",\n     location: \"Beaverton\",\n     hours: \"10:00am - 1:30pm\",\n     booth: \"9G\"\n  }\n];","import React from 'react';\nimport LocationDetails from './LocationDetails.js';\nimport { marketSchedule } from '../../Pre-Populated-Data/MarketSchedule.js';\n\nclass LocationControl extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dateSelected: 0,\n      currentMarketLocation: marketSchedule[0]\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.setState({dateSelected: event.target.value, currentMarketLocation: marketSchedule[event.target.value]});\n  }  \n  \n  render(){\n\n    return(\n      <React.Fragment>\n        <div className=\"location-box\">\n          <form>\n            <select value={this.state.dateSelected} onChange={this.handleSubmit}>\n              <option value=\"0\">Sunday</option>\n              <option value=\"1\">Monday</option>\n              <option value=\"2\">Tuesday</option>\n              <option value=\"3\">Wednesday</option>\n              <option value=\"4\">Thursday</option>\n              <option value=\"5\">Saturday</option>\n            </select>\n          </form>\n          <LocationDetails \n          day={this.state.currentMarketLocation.day}\n          location={this.state.currentMarketLocation.location}\n          hours={this.state.currentMarketLocation.hours}\n          booth={this.state.currentMarketLocation.booth} />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default LocationControl;","import React from 'react';\nimport '../App.css';\nimport ProduceControl from \"./Produce/ProduceControl\"\nimport NavBar from \"./Navigation/NavBar\"\nimport LocationControl from \"./Location/LocationControl\"\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"everything\">\n        <div className=\"navigation\">\n          <NavBar />\n        </div>\n        <div className=\"body\">\n          <LocationControl />\n          <ProduceControl />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}